<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data on </title>
    <link>/categories/data/</link>
    <description>Recent content in Data on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 02 Sep 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/data/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Classification handwritten digits with liner_classifer in python</title>
      <link>/blog/classification-handwritten-digits-with-liner-classifer-in-python/</link>
      <pubDate>Sun, 02 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/classification-handwritten-digits-with-liner-classifer-in-python/</guid>
      <description>1.Get:import pacakges and load mnist dataset
import matplotlib.pyplot as pltimport numpy as npimport tensorflow as tf## C:\ANACON~1\lib\site-packages\h5py\__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.## from ._conv import register_converters as _register_converterslearn = tf.contrib.learntf.logging.set_verbosity(tf.logging.ERROR)# Import the dataset 28*28=784mnist = learn.datasets.load_dataset(&amp;#39;mnist&amp;#39;)## Extracting MNIST-data\train-images-idx3-ubyte.gz## Extracting MNIST-data\train-labels-idx1-ubyte.gz## Extracting MNIST-data\t10k-images-idx3-ubyte.</description>
    </item>
    
    <item>
      <title>Decision Tree model in python</title>
      <link>/blog/decision-tree-in-python/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/decision-tree-in-python/</guid>
      <description>import pacakges and load iris dataset
from sklearn.datasets import load_irisfrom sklearn.model_selection import train_test_splitfrom sklearn import treefrom sklearn.metrics import accuracy_scoreiris = load_iris()print (iris.feature_names) # metadata: names of the features## [&amp;#39;sepal length (cm)&amp;#39;, &amp;#39;sepal width (cm)&amp;#39;, &amp;#39;petal length (cm)&amp;#39;, &amp;#39;petal width (cm)&amp;#39;]print (iris.target_names) # metadata: names of the different types of flowers## [&amp;#39;setosa&amp;#39; &amp;#39;versicolor&amp;#39; &amp;#39;virginica&amp;#39;]X = iris.data # featuresy = iris.target # labelsX_train is train features and X_test is test features</description>
    </item>
    
    <item>
      <title>KNN model in python</title>
      <link>/blog/knn-in-python/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/knn-in-python/</guid>
      <description>1.Get:import pacakges and load iris dataset
from sklearn.datasets import load_irisfrom sklearn.model_selection import train_test_splitfrom sklearn.neighbors import KNeighborsClassifierfrom sklearn.metrics import accuracy_scoreiris = load_iris()2.CleanX_train is train features and X_test is test features.y_train is train label and y_test is test label.with 0.3 splict, we have 70% obs(105) for training and 30% obs(45) for testing.
print (iris.feature_names) # metadata: names of the features## [&amp;#39;sepal length (cm)&amp;#39;, &amp;#39;sepal width (cm)&amp;#39;, &amp;#39;petal length (cm)&amp;#39;, &amp;#39;petal width (cm)&amp;#39;]print (iris.</description>
    </item>
    
  </channel>
</rss>